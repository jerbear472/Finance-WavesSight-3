'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { supabase } from '@/lib/supabase';
import { CheckCircle, XCircle, Loader2 } from 'lucide-react';

export default function ConfirmEmail() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState('');
  const [debugInfo, setDebugInfo] = useState('');

  useEffect(() => {
    const handleEmailConfirmation = async () => {
      try {
        // Debug: Log the full URL
        console.log('Full URL:', window.location.href);
        setDebugInfo(`URL: ${window.location.href}`);

        // Try multiple methods to get the parameters
        // Method 1: From hash
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        let token_hash = hashParams.get('token_hash');
        let type = hashParams.get('type');
        let access_token = hashParams.get('access_token');
        let refresh_token = hashParams.get('refresh_token');

        // Method 2: From search params
        if (!token_hash) {
          token_hash = searchParams.get('token_hash');
          type = searchParams.get('type');
          access_token = searchParams.get('access_token');
          refresh_token = searchParams.get('refresh_token');
        }

        console.log('Params found:', { token_hash, type, access_token, refresh_token });
        
        // Add more debug info
        setDebugInfo(prev => prev + `\nHash params: token_hash=${token_hash}, type=${type}, access_token=${access_token ? 'yes' : 'no'}`);
        setDebugInfo(prev => prev + `\nSearch params: ${searchParams.toString()}`);

        // If we have access_token, the email is already confirmed
        if (access_token) {
          console.log('Email already confirmed, setting session');
          const { data, error } = await supabase.auth.setSession({
            access_token,
            refresh_token: refresh_token!,
          });

          if (error) throw error;

          setStatus('success');
          setMessage('Email confirmed! Redirecting to dashboard...');
          setTimeout(() => {
            router.push('/dashboard');
          }, 1500);
          return;
        }

        // If we have token_hash, try to verify it
        if (token_hash && type) {
          console.log('Attempting to verify OTP');
          const { data, error } = await supabase.auth.verifyOtp({
            token_hash,
            type: type as 'signup' | 'recovery' | 'invite' | 'email',
          });

          if (error) {
            console.error('OTP verification error:', error);
            setDebugInfo(prev => prev + `\nOTP Error: ${error.message}`);
            
            // Check if error is due to already confirmed email
            if (error.message.includes('Token has expired or is invalid')) {
              // Try to check if user exists and is confirmed
              const { data: { user } } = await supabase.auth.getUser();
              if (user) {
                setStatus('success');
                setMessage('Email already confirmed! Redirecting to login...');
                setTimeout(() => {
                  router.push('/login?confirmed=true');
                }, 1500);
                return;
              } else {
                // Try direct login to see if email is confirmed
                const email = searchParams.get('email');
                if (email) {
                  setDebugInfo(prev => prev + `\nAttempting to check email: ${email}`);
                }
              }
            }
            throw error;
          }

          setStatus('success');
          setMessage('Email confirmed successfully! Redirecting to login...');
          setTimeout(() => {
            router.push('/login?confirmed=true');
          }, 2000);
        } else {
          throw new Error('No confirmation parameters found in URL');
        }

      } catch (error: any) {
        console.error('Email confirmation error:', error);
        setStatus('error');
        setMessage(error.message || 'Failed to confirm email. The link may be invalid or expired.');
        setDebugInfo(prev => prev + `\nError: ${error.message}`);
      }
    };

    handleEmailConfirmation();
  }, [router, searchParams]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900/20 to-gray-900 flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-xl p-8">
          <div className="text-center">
            {status === 'loading' && (
              <>
                <Loader2 className="w-16 h-16 text-wave-500 mx-auto mb-4 animate-spin" />
                <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                  Confirming your email...
                </h1>
                <p className="text-gray-600 dark:text-gray-400">
                  Please wait while we verify your email address.
                </p>
              </>
            )}

            {status === 'success' && (
              <>
                <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                  Email Confirmed!
                </h1>
                <p className="text-gray-600 dark:text-gray-400 mb-6">
                  {message}
                </p>
                <Link
                  href="/login"
                  className="inline-flex items-center justify-center px-6 py-3 bg-gradient-to-r from-wave-500 to-wave-600 text-white rounded-xl hover:from-wave-600 hover:to-wave-700 transition-all font-medium"
                >
                  Go to Login
                </Link>
              </>
            )}

            {status === 'error' && (
              <>
                <XCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
                <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                  Confirmation Failed
                </h1>
                <p className="text-gray-600 dark:text-gray-400 mb-6">
                  {message}
                </p>
                
                {/* Debug information */}
                {debugInfo && (
                  <div className="mb-6 p-4 bg-gray-100 dark:bg-neutral-800 rounded-lg text-left">
                    <p className="text-xs font-mono text-gray-600 dark:text-gray-400 break-all">
                      {debugInfo}
                    </p>
                  </div>
                )}
                
                <div className="space-y-3">
                  <Link
                    href="/register"
                    className="block w-full px-6 py-3 bg-gradient-to-r from-wave-500 to-wave-600 text-white rounded-xl hover:from-wave-600 hover:to-wave-700 transition-all font-medium text-center"
                  >
                    Try Again
                  </Link>
                  <Link
                    href="/login"
                    className="block w-full px-6 py-3 bg-gray-200 dark:bg-neutral-800 text-gray-900 dark:text-white rounded-xl hover:bg-gray-300 dark:hover:bg-neutral-700 transition-all font-medium text-center"
                  >
                    Go to Login
                  </Link>
                </div>
              </>
            )}
          </div>
        </div>

        <p className="text-center mt-6 text-gray-400 text-sm">
          Having trouble? <a href="mailto:support@wavesight.com" className="text-wave-500 hover:text-wave-400">Contact support</a>
        </p>
      </div>
    </div>
  );
}